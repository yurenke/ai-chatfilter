# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import learn_pb2 as learn__pb2


class LearningCenterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Touch = channel.unary_unary(
                '/LearningCenter/Touch',
                request_serializer=learn__pb2.BasicRequest.SerializeToString,
                response_deserializer=learn__pb2.BasicReply.FromString,
                )
        self.StartTrain = channel.unary_unary(
                '/LearningCenter/StartTrain',
                request_serializer=learn__pb2.TrainCommand.SerializeToString,
                response_deserializer=learn__pb2.TrainInfo.FromString,
                )
        self.StopTrain = channel.unary_unary(
                '/LearningCenter/StopTrain',
                request_serializer=learn__pb2.BasicCommand.SerializeToString,
                response_deserializer=learn__pb2.TrainInfo.FromString,
                )
        self.GetTrainProcessingInfo = channel.unary_unary(
                '/LearningCenter/GetTrainProcessingInfo',
                request_serializer=learn__pb2.BasicCommand.SerializeToString,
                response_deserializer=learn__pb2.TrainInfo.FromString,
                )
        self.StreamTrainProcessing = channel.stream_stream(
                '/LearningCenter/StreamTrainProcessing',
                request_serializer=learn__pb2.BasicCommand.SerializeToString,
                response_deserializer=learn__pb2.TrainInfo.FromString,
                )


class LearningCenterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Touch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTrain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTrain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrainProcessingInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTrainProcessing(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LearningCenterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Touch': grpc.unary_unary_rpc_method_handler(
                    servicer.Touch,
                    request_deserializer=learn__pb2.BasicRequest.FromString,
                    response_serializer=learn__pb2.BasicReply.SerializeToString,
            ),
            'StartTrain': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTrain,
                    request_deserializer=learn__pb2.TrainCommand.FromString,
                    response_serializer=learn__pb2.TrainInfo.SerializeToString,
            ),
            'StopTrain': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTrain,
                    request_deserializer=learn__pb2.BasicCommand.FromString,
                    response_serializer=learn__pb2.TrainInfo.SerializeToString,
            ),
            'GetTrainProcessingInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrainProcessingInfo,
                    request_deserializer=learn__pb2.BasicCommand.FromString,
                    response_serializer=learn__pb2.TrainInfo.SerializeToString,
            ),
            'StreamTrainProcessing': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamTrainProcessing,
                    request_deserializer=learn__pb2.BasicCommand.FromString,
                    response_serializer=learn__pb2.TrainInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LearningCenter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LearningCenter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Touch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearningCenter/Touch',
            learn__pb2.BasicRequest.SerializeToString,
            learn__pb2.BasicReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTrain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearningCenter/StartTrain',
            learn__pb2.TrainCommand.SerializeToString,
            learn__pb2.TrainInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopTrain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearningCenter/StopTrain',
            learn__pb2.BasicCommand.SerializeToString,
            learn__pb2.TrainInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTrainProcessingInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearningCenter/GetTrainProcessingInfo',
            learn__pb2.BasicCommand.SerializeToString,
            learn__pb2.TrainInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTrainProcessing(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/LearningCenter/StreamTrainProcessing',
            learn__pb2.BasicCommand.SerializeToString,
            learn__pb2.TrainInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
